//============================================================================
// Name        : LongestValidParentheses.cpp
// Author      : Mohamed Dawoud
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================
/*
 32. Longest Valid Parentheses

Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.

Example 1:

Input: "(()"
Output: 2
Explanation: The longest valid parentheses substring is "()"
Example 2:

Input: ")()())"
Output: 4
Explanation: The longest valid parentheses substring is "()()"
 */
#include <iostream>
#include <stack>
using namespace std;

int longestValidParentheses(string s) {
 int runningCount = 0;
 int maxCount = 0;
 stack <char> st;

 for(uint i=0; i<s.size(); i++){

	 // invalid case
	 // save max so far and reset the running counter
	 if(s[i] == ')') {
		 if(st.empty() == true) {
			 maxCount = max(maxCount, runningCount);
			 runningCount = 0;
		 }
		 else { //valid case, increment running Count
			 st.pop();
			 runningCount++;
			 maxCount = max(maxCount, runningCount);
		 }
	 } else if(s[i] == '(')  {
		 st.push('(');
	 }
 }

 return maxCount;
}

int main() {
	int count = longestValidParentheses("(()");
	cout << count << endl; // prints
	return 0;
}
